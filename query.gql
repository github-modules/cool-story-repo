<<<<<<< HEAD:query.js
function buildQuery (arrOfRepos) {
  const allSubqueries = arrOfRepos.map((repoName) => {
    let [owner, repo] = (repoName || '').split('/')
    if (!owner || !repo) {
      throw new Error('First argument must be a GitHub repo in `owner/repo` format')
    }
    const query = `repository(owner: "${owner}", name: "${repo}") {
        nameWithOwner
        description
        descriptionHTML
        homepageUrl
        isFork
        forkCount
        licenseInfo {
=======
query CoolStory($owner: String!, $repo: String!) {
  repository(owner: $owner, name: $repo) {
    nameWithOwner
    description
    descriptionHTML
    homepageUrl
    isFork
    forkCount
    licenseInfo {
      name
    }
    createdAt
    pushedAt

    # package.json
    object(expression: "master:package.json") {
      ...on Blob {
        text
      }
    }

    # releases
    releases(first: 5, orderBy: { field: CREATED_AT, direction: DESC }) {
      edges {
        node {
>>>>>>> a72f1d335fabec98f53f00b7f4f74001e1f57f58:query.gql
          name
        }
        createdAt
        pushedAt
        object(expression: "master:package.json") {
          ... on Blob {
            text
          }
        }
        releases(first: 5, orderBy: {field: CREATED_AT, direction: DESC}) {
          edges {
            node {
              name
              createdAt
              isDraft
              isPrerelease
              publishedAt
              tag {
                name
              }
              releaseAssets(first: 100) {
                edges {
                  node {
                    name
                    downloadCount
                    downloadUrl
                    size
                  }
                }
              }
            }
          }
          pageInfo {
            endCursor
            hasNextPage
          }
        }
<<<<<<< HEAD:query.js
        collaborators(affiliation: DIRECT, first: 100) {
          nodes {
            name
            avatarUrl
            bio
            company
            contributedRepositories(first: 100) {
              nodes {
                nameWithOwner
              }
            }
          }
        }
      }`

    // replaces - with _ for aliases because graphQL doesnt like -
    if (owner.includes('-')) owner = owner.replace(/-/g, '_')
    if (repo.includes('-')) repo = repo.replace(/-/g, '_')
    return `${owner}___${repo}:${query}`
  })
  return `query CoolStory{${allSubqueries.join('\n\n')}}`
}

module.exports = buildQuery
=======
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }

    #collaborators
     collaborators(affiliation: DIRECT, first: 100){
        nodes{
          name
          avatarUrl
          bio
          company
          contributedRepositories(first:100, orderBy:{field:UPDATED_AT, direction:DESC}){
            nodes{
              nameWithOwner
            }
          }
        }
      }

  }
}
>>>>>>> a72f1d335fabec98f53f00b7f4f74001e1f57f58:query.gql
